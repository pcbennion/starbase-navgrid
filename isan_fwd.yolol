N=1000 pr=0 o=160000 e=8*o p=1000000 r=1 m="\n " syn=m+m+m+"   SYNC"
d="origin_" a=d+"north" b=d+"south" c=d+"east" d+="west" w=17-pr
u=e*3/13 l=2*o mm=l*13/19 k=e*3/19 nn=l*13/3 :it=a :jt=b :kt=c :lt=d
xm="\nx: " ym="\ny: " zm="\nz: " m1="\nUx: " m2="\nUy: " m3="\nUz: "
ol="\n\n   ISAN2\n  OFFLINE" s="ISAN2 :_\n     "+ol h=10 s0=-1
x/=:a :U=syn wt=3 IF h!=s0 THEN h=:sy s0=:sy GOTO6 END GOTO6+(:sy!=s0)
h=:sy s0=-1 x=h>3 wt-=(wt>2)*x^pr r=2+(2+h)*0^x GOTO 7+(r-1)*(1>wt--)
t=(p-:i)^2 i=(p-:j)^2 g=(p-:k)^2 f=(p-:l)^2 x/=:a*:i h=h++%4+4 GOTO17
x^=1 :U=m+"\n QUAD LOST\n Switching\n to MONO" :sy=0 wt=3 GOTO7
t=(p-:i)^2 er=(t-el)/4 el=t x/=:a*:i :it=b r=5 h=1 GOTO w+p*(:_==s)
i=(p-:i)^2 fr=(i-fl)/4 fl=i x/=:a*:i :it=c r=6 h=2 GOTO w+p*(:_==s)
g=(p-:i)^2 gr=(g-gl)/4 gl=g x/=:a*:i :it=d r=7 h=3 GOTO w+p*(:_==s)
f=(p-:i)^2 hr=(f-hl)/4 hl=f x/=:a*:i :it=a r=4 h=0 GOTO w+p*(:_==s)
x=1^1 :sy="\n\nReceiver Error!" :U=:sy GOTO 14+p*(:_==s)
:sy="\n\nAdvanced Chip Required!" :U=:sy GOTO 15+p*(:_==s)
t+=er i+=fr g+=gr f+=hr r*=h==:sy      // UVector by StandPeter
x=(t+i)/e+g/u-f/k y=i/l-t/mm+(g+f)/nn z=(g+f-t-i)/o xx=x j=y r*=h==:sy
zz=z x-=:x y-=:y z-=:z q=SQRT(x^2+y^2+z^2) :Ux=x/q :Uy=y/q :Uz=z/q
:U=xm+xx/N*N+ym+j/N*N+zm+zz/N*N+m1+:Ux+m2+:Uy+m3+:Uz GOTO 6+r*(h==:sy)
:sy=m+ol :U=m+ol GOTO 20*(:_==s)       // Based on ISAN by Collective
< ------------------- This line is 70 chars long ------------------- >

ivector.yolol
    by StandPeter

BASED ON ISAN 2 by Collective (GPLv3): isan.to/doc

< ------------------- This line is 70 chars long ------------------- >

ADVANCED CHIP REQUIRED

Provides the normalized X ("forward") vector - called U here for
clarity - used in Tait-Bryan attitude calculations, providing heading
and pitch in a fixed-coordinate system.

https://en.wikipedia.org/wiki/Euler_angles

The x-y-z fields of the U vector are saved to :Ux, :Uy, and :Uz,
respectively.

CODE COMMENTS:
lines 1-5: Set up variables and constants.

line 6: Quad ISAN readings. If using mono or a nonessential receiver
has been lost by this or another quad array, fall through to the next
line.

line 7: Tell other recievers to switch to mono and wait for the main
ISAN :a receiver to switch to "west", indicating that it is also
rotating through ISAN transmitters in mono mode. Print an error until
that happens.

line 8: Sync up the mono receiver with the main ISAN mono receiver so
readings from the same transmitter at the same time.

lines 9-12: Not sequential. Mono mode ISAN readings, rotating through
ISAN transmitters one at a time. Fall through to line 13 if the :i
receiver is missing or out of range.

line 13: Catch errors due to reciever problems and print an error.

line 14: Prediction mode calculations from ISAN. If the ISAN mono
reciever and the :i reciver are out of sync, go to line 7 to restart
the synchronization process.

line 15: Position calculations from ISAN.

line 16: Compute difference between this ISAN array and the main ISAN
array and normalize the result to get the Tait-Bryan X vector. Save
to :Ux, :Uy, and :Uz to keep the variables distinct from ISAN position

line 17: Catch syntax errors due to basic chips and print an error

line 18: Print out the position of this ISAN array and the resulting
X vector. Go back to take readings from transmitters, or go to line 7
to restart sync if mono is out of sync.

line 19: Catch if :at has gone missing and go to line 13.

line 20: Display "ISAN Offline" until ISAN leaves streaming mode