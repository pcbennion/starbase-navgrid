o=90 p=180 u=40 v=50 d=10 h=0.5 ds="$" ns="" nd=0 t="9843" r=17 GOTO3
:nPit=u*n3^3+v*n3 :nHdg=(1-2*(n1>0))*(-u*i^3-v*i+o) :nDist=nd
s0=:sy%4 x=1*nd n1=:nX-:x n2=:nZ-:z n3=:nY-:y nd=SQRT(n1^2+n2^2+n3^2)
:nStat="" x=1*nd n1/=nd n2/=nd n3/=nd nd=nd/1000*1000  //euler_navp by
i=n2/SQRT(1-n3^2) x=:sy%4 GOTO5-(3-12*(ns!=:nStr))*(x!=s0)//StandPeter
s0=:sy err+=2*(err<9)*(:sy>"9") x=6-(err--<1) GOTOx+(14-x)*(ns!=:nStr)
s-- s*=s>0 p1="X+:\nPrograde0" p2="X-:\nRetrograde1" p3="Z+:\nRadial2"
s*=s<7 p4="Z-:\nAnti-radial3" p5="Y+:\nNormal4" p6="Y-:\nAnti-normal5"
:nName="Preset "+p1+p2+p3+p4+p5+p6-s-p1-p2-p3-p4-p5-p6 GOTO10+s/2
sn=1-2*(s%2) n1=.99*sn n2=0 n3=0 nd="-" :nX=sn :nY=0 :nZ=0 GOTO3
sn=1-2*(s%2) n1=0 n2=.99*sn n3=0 nd="-" :nX=0 :nY=0 :nZ=sn GOTO3
sn=1-2*(s%2) n1=0 n2=0 n3=.99*sn nd="-" :nX=0 :nY=sn :nZ=0 GOTO3
x=1 x/=ns==:nStr IF :nStat=="" THEN :nStat=ss :nName=nn END GOTO13
:nStat="[ Loading ]" nn="" l="/" ns=:nStr s=ns x=1 x/=ns GOTO7
x/=ns=="" ss="NO WAYPOINT" :nStat=ss nn="    NaN" :nName=nn GOTO13
m=0 n=-1 i=3 :nName=nn c=s c-=--s x/=c!=ds nn=c+nn GOTO16+4*(s=="")
c=s c-=--s x/=c>l w=5*(c>4)+2*(t>(t-c)) w+=w<c w+=w<c m+=w*d^n++ GOTOr
IF c=="-" THEN m*=-1 s-- END x/=s>"" i-- nx=m x/=i ny=m x/=i-1 nz=m
x/=s>"" m=0 n=-1 x=1 nd=1 :nX=nx :nY=ny :nZ=nz GOTO17-15*(i<1)   //for
ss="[  ERROR  ]" :nStat=ss nn="Bad Format" :nName=nn GOTO13  //NavGrid
// ------------------ This line is 70 chars long ------------------- >

// euler_navp.yolol
//     by StandPeter

// ------------------ This line is 70 chars long ------------------- >

// ADVANCED CHIP REQUIRED

// Computes the Euler Angles of your target navpoint to find its
// alignment relative to your current position.

// Euler outputs are saved to :nPit, :nHdg, and :nDist

// Whenever a new navpoint is loaded into :nStr by navp.yolol, this
// chip decodes it into usable coordinates.

// Once loaded, navpoint attributes are saved to :nName, :nX, :nY, :nZ

// Navpoint status messages (such as loading, no waypoint, etc) are
// saved to :nDist