N=1*1000 pr=0 o=160000 e=8*o p=1000000 r=-1 ql="\n\n QUAD LOST!\n "
ol="\n\n   ISAN2\n  OFFLINE" s="ISAN2 :_\n     "+ol :quad=1 :ner=0
d="origin_" a=d+"north" b=d+"south" c=d+"east" d+="west" h=a w=15-pr
u=e*3/13 l=2*o mm=l*13/19 k=e*3/19 nn=l*13/3 :mt=h :nt=b :ot=c :pt=d
m="\n " m1="\nj1: " m2="\nj2: " m3="\nj3: " qm=m+m+m x=:o qm=ql
t=p-:m t*=t i=p-:n i*=i g=p-:o g*=g f=p-:p f*=f GOTO15+p*(:_==s)/:quad
:jdb=qm+"Syncing w/\n MONO" :quad=0 x/=:at!=d :ner=1 GOTO 7+p*(:_==s)
:mt=a :ner=0 IF :at!=a THEN wait=4+pr GOTO8 END GOTO 8+(wait--<=0)
t=p-:m t*=t er=(t-el)/4 el=t x/=:m*:a h=b :mt=h r=3 GOTO w+p*(:_==s)
i=p-:m i*=i fr=(i-fl)/4 fl=i x/=:m*:a h=c :mt=h r=4 GOTO w+p*(:_==s)
g=p-:m g*=g gr=(g-gl)/4 gl=g x/=:m*:a h=d :mt=h r=5 GOTO w+p*(:_==s)
f=p-:m f*=f hr=(f-hl)/4 hl=f x/=:m*:a h=a :mt=h r=2 GOTO w+p*(:_==s)
st=:_!=s :ner=1 :jdb="\n\n receiver\n ERROR" GOTO 13*st // NavGrid
t+=er i+=fr g+=gr f+=hr r*=h==:at // github.com/pcbennion/sb-navgrid
x=(t+i)/e+g/u-f/k y=i/l-t/mm+(g+f)/nn z=(g+f-t-i)/o xx=x yy=y zz=z
x-=:x y-=:y z-=:z q=SQRT(x^2+y^2+z^2) :j1=x/q :j2=y/q :j3=z/q GOTO18
st=:_!=s :ner=1 :jdb="\n\nAdvanced chip required!" GOTO 17*st
:jdb=m+xx/N*N+m+yy/N*N+m+zz/N*N+m1+:j1+m2+:j2+m3+:j3 GOTO 7+r*(h==:at)
GOTO13                                 // BASED ON ISAN v2.5.3 080921
st=:_==s :ner=1 :jdb=ol GOTO 20*st     // by Collective (isan.to/doc)
< ------------------- This line is 70 chars long ------------------- >

jvector.yolol
    by StandPeter

BASED ON ISAN 2 by Collective (GPLv3): isan.to/doc

< ------------------- This line is 70 chars long ------------------- >

ADVANCED CHIP REQUIRED

Provides the normalized Y ("down") vector used for Tait-Bryan
attitude calculations, providing roll in a fixed-coordinate system.

The x-y-z fields of the vector are saved to :j1, :j2, and :j3,
respectively, to make the variables distinct from ISAN outputs.

CODE COMMENTS:
lines 1-5: Set up variables and constants.

line 6: Quad ISAN readings. If using mono or a nonessential receiver
has been lost by this or another quad array, fall through to the next
line.

line 7: Tell other recievers to switch to mono and wait for the main
ISAN :a receiver to switch to "west", indicating that it is also
rotating through ISAN transmitters in mono mode. Print an error until
that happens.

line 8: Sync up the mono receiver with the main ISAN mono receiver so
readings from the same transmitter at the same time.

lines 9-12: Not sequential. Mono mode ISAN readings, rotating through
ISAN transmitters one at a time. Fall through to line 13 if the :m
receiver is missing or out of range.

line 13: Catch errors due to reciever problems and print an error.

line w: Prediction mode calculations from ISAN. If the ISAN mono
reciever and the :m reciver are out of sync, go to line 7 to restart
the synchronization process.

line 15: Position calculations from ISAN.

line 16: Compute difference between this ISAN array and the main ISAN
array and normalize the result to get the Tait-Bryan Y vector. Save
to :j1, :j2, and :j3 to keep the variables distinct from ISAN position

line 17: Catch syntax errors due to basic chips and print an error

line 18: Print out the position of this ISAN array and the resulting
X vector. Go back to take readings from transmitters, or go to line 7
to restart sync if mono is out of sync.

line 19: Catch if :at has gone missing and go to line 13.

line 20: Hide jdb display if in ISAN streaming mode.